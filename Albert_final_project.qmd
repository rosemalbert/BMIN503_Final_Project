---
title: "Regional Analysis of Preterm Birth Characteristics"
subtitle: "BMIN503/EPID600 Final Project"
author: "Rose Albert"
format: html
editor: visual
number-sections: true
embed-resources: true
---

------------------------------------------------------------------------

# Interrogating sex as a biological variable in county-level preterm birth inequity

December 13, 2024

By Rose Albert

## Overview {#sec-overview}

Preterm birth affects approximately 10% of all births, and there is a well-established male vulnerability and female resilience during the neonatal period. The goal of this project is to interrogate sex as a biological variable at the county-level using CDC Wonder Natality Data and identify sex-differences in preterm birth rates and NICU admission. I have spoken with Dr. Aimin Chen and Dr. Heather Burris about biological and structural determinants contributing to preterm birth inequity, as well as potential areas of clinical, public health, and policy intervention.

The data for this project can be found in my [final project GitHub repository](https://github.com/rosemalbert/BMIN503_Final_Project/tree/master).

## Introduction {#sec-introduction}

Preterm birth can predispose infants to immediate risks in the neonatal period as well as long-term adverse sequelae. For example, preterm infants are born with underdeveloped lungs and often require therapeutic interventions such as surfactant administration, antibiotics, steroids, mechanical ventilation, and supplemental oxygen for survival. However, these therapeutics can also pose postnatal insults and contribute to lung injury and diseases such as bronchopulmonary dysplasia.

Interrogation of sex as a biological variable has received increasing attention as a critical area for understanding basic pathophysiology and differential response to therapeutics. Male sex is an independent risk factor for numerous pediatric diseases and diseases of prematurity. This project will investigate male susceptibility to preterm birth and NICU admission at the county-level. An understanding of preterm birth characteristics can inform local public health interventions.

## Methods {#sec-methods}

[*Data curation and cleaning*]{.underline}

*County-level Birth Characteristics Data Source:* I am using the [CDC Wonder Natality Data](https://wonder.cdc.gov/wonder/help/Natality-expanded.html#) (2023) grouped by "County of Residence," "Sex of Infant," "NICU Admission," and "OE Gestational Age Recode 10," with the measures "Births" and "Percent of Total Births."

*Mapping Data Source:* I am drawing from Assignment 5 to use geospatial data, tidy census, and leaflet to generate interactive maps.update.packages("tidycensus")

```{r}
#load necessary libraries
library(tidyverse)
library(sf)
library(tigris)
library(tidycensus)
library(leaflet)
options(tigris_use_cache = TRUE)
options(progress_enabled = FALSE)

#Load county-level birth data downloaded from CDC Wonder
birth_data <- read.delim("https://raw.githubusercontent.com/rosemalbert/BMIN503_Final_Project/refs/heads/master/Natality%2C%202016-2023%20expanded_sex.txt")

county_data <- read.delim("https://raw.githubusercontent.com/rosemalbert/BMIN503_Final_Project/refs/heads/master/Natality%2C%202016-2023%20expanded%20_county.txt")

#view column names
colnames(birth_data)
colnames(county_data)

#merge birth_data and county_data
merged_data <- left_join(birth_data, county_data, by = "County.of.Residence.Code")

#clean merged_data 
library(dplyr)

# clean merged data by removing unnecessary columns, checking discrepancies, and renaming
cleaned_data <- merged_data %>%
    # Remove 'Notes.x' column
    select(-Notes.x) %>%
    
    # Check for discrepancies between 'County.of.Residence.x' and 'County.of.Residence.y'
    # 
    mutate(
        County.of.Residence = ifelse(
            County.of.Residence.x == County.of.Residence.y, 
            County.of.Residence.x, 
            NA  
        )
    ) %>%
    
    # Merge 'County.of.Residence.x' and 'County.of.Residence.y'
    select(-County.of.Residence.x, -County.of.Residence.y) %>%
    
    # Rename 'Births.y' to 'Total.Births'
    rename(
        Total.Births = Births.y
    ) %>%
    
    # Remove 'Notes.y' column
    select(-Notes.y) %>%
  
    # Remove sex of infant code
    select(-Sex.of.Infant.Code) %>%
    
    # Remove 'X..of.Total.Births.y' and 'X..of.Total.Births.x'
    select(-c(X..of.Total.Births.x, X..of.Total.Births.y)) %>%
  
   # Remove 'OE.Gestational.Age.Recode.10.Code'
    select(-OE.Gestational.Age.Recode.10.Code) %>%
  
   # Remove 'NICU.Admission.Code'
    select(-NICU.Admission.Code) %>%
  
    # Filter out rows where 'NICU.Admission' or 'OE.Gestational.Age.Recode.10' are "Unknown"
    filter(
        !NICU.Admission %in% c("Unknown or Not Stated", ""),
        !OE.Gestational.Age.Recode.10 %in% c("Unknown or Not Stated", "")
    ) %>%
    
    # Remove any duplicates
    distinct()

cleaned_data <- cleaned_data %>%
  mutate(County.of.Residence.Code = as.character(County.of.Residence.Code))

# View cleaned data
head(cleaned_data)

# Convert 'County.of.Residence.Code' to character before merging
preterm_rate_data <- cleaned_data %>%
   mutate(
        Is.Preterm = OE.Gestational.Age.Recode.10 %in% c("28 - 31 weeks", "32 - 35 weeks", "36 weeks", "20 - 27 weeks", "Under 20 weeks"),
        County.of.Residence.Code = as.character(County.of.Residence.Code)  # Convert to character
    ) %>%
   group_by(County.of.Residence, County.of.Residence.Code) %>%  # Keep 'County.of.Residence.Code' in the group_by
    summarise(
        Preterm.Births = sum(ifelse(Is.Preterm, Births.x, 0), na.rm = TRUE),
        Preterm.Birth.Rate = (Preterm.Births / Total.Births) * 100
    ) %>%
   ungroup()

# View the result to ensure 'County.of.Residence.Code' is retained
head(preterm_rate_data)

#load census shapefile data and merge by county FIPs 
counties_sf <- counties(cb = TRUE, resolution = "20m") # cb = TRUE for a simplified geometry

# Merge the cleaned data with the counties shapefile
county_map_preterm_data <- left_join(counties_sf, preterm_rate_data, by = c("GEOID" = "County.of.Residence.Code"))

county_map_cleaned_data <- left_join(counties_sf, cleaned_data, by = c("GEOID" = "County.of.Residence.Code"))

# Ensure the 'Sex.of.Infant' column is available and that it's a factor or character
cleaned_data$Sex.of.Infant <- as.factor(cleaned_data$Sex.of.Infant)




```

Create data frame for sex-stratified analysis.

```{r}
# Create a new data frame stratified by sex
preterm_sex_data <- cleaned_data %>%
  mutate(
    Is.Preterm = OE.Gestational.Age.Recode.10 %in% c("28 - 31 weeks", "32 - 35 weeks", "36 weeks", "20 - 27 weeks", "Under 20 weeks"),
    County.of.Residence.Code = as.character(County.of.Residence.Code)  # Convert to character
  ) %>%
  group_by(County.of.Residence, County.of.Residence.Code, Sex.of.Infant) %>%
  summarise(
    Preterm.Births = sum(ifelse(Is.Preterm, Births.x, 0), na.rm = TRUE),
    Preterm.Birth.Rate = (Preterm.Births / Total.Births) * 100
  ) %>%
  ungroup()

# View the new data frame
head(preterm_sex_data)

```

```{r}
# Assuming ELGANS is defined as less than 28 weeks of gestational age
preterm_sex_data_elgans <- cleaned_data %>%
  mutate(
    Is.Preterm = OE.Gestational.Age.Recode.10 %in% c("28 - 31 weeks", "32 - 35 weeks", "36 weeks", "20 - 27 weeks", "Under 20 weeks"),
    ELGANS = ifelse(OE.Gestational.Age.Recode.10 %in% c("Under 20 weeks", "20 - 27 weeks"), "ELGANS", "Not ELGANS"),  # ELGANS is <28 weeks
    County.of.Residence.Code = as.character(County.of.Residence.Code)  # Convert to character
  ) %>%
  group_by(County.of.Residence, County.of.Residence.Code, Sex.of.Infant, ELGANS) %>%
  summarise(
    Preterm.Births = sum(ifelse(Is.Preterm, Births.x, 0), na.rm = TRUE),
    Preterm.Birth.Rate = (Preterm.Births / Total.Births) * 100
  ) %>%
  ungroup()

# View the new stratified data frame
head(preterm_sex_data_elgans)

```

[*Analysis plan*]{.underline}

*Exploratory analysis of data:* Generate county-level choropleth maps of birth rates ((births/total population)\*1000 for each county). Generate county-level choropleth maps of preterm birth rates (\<37 gestational age births/total population). Generate sex-stratified maps of preterm birth rates. Generate sex-stratified choropleth maps of NICU admissions by county. Generate bar graphs showing NICU admission rates by sex and sex distribution of gestational age groups.

*Data analysis:* Conduct 2-way ANOVA to determine if sex as a biological variable is a significant predictor of NICU admission. Identify counties with highest and lowest preterm birth rates, and the highest and lowest NICU admission rates.

## Results {#sec-results}

First, I developed a county-level choropleth maps of birth rates (live births per 1000 people) for counties that did not have any missing data. The below map represents 496 counties.

```{r}
#load necessary libraries
library(tidyverse)
library(sf)
library(tidycensus)
library(ggspatial)
library(leaflet)
library(cowplot)
library(nhanesA)
library(haven)
library(viridis)

# Convert Birth.Rate to numeric (if necessary)
county_map_cleaned_data$Birth.Rate <- as.numeric(county_map_cleaned_data$Birth.Rate)

# Recheck the structure of the column
str(county_map_cleaned_data$Birth.Rate)

# Remove rows where Birth.Rate is NA
county_map_cleaned_data <- county_map_cleaned_data %>%
  filter(!is.na(Birth.Rate))

#load map theme
map_theme <- function() {
  theme_minimal() +  
    theme(
      axis.line = element_blank(), 
      axis.text = element_blank(),  
      axis.title = element_blank(),
      panel.grid = element_line(color = "white"), 
      legend.key.size = unit(0.8, "cm"),     
      legend.text = element_text(size = 16),   
      legend.title = element_text(size = 16)
    )
}

#create my palette
myPalette <- colorRampPalette(viridis(100))

# Generate the choropleth map for birth rates
birth_rates_map <- ggplot(data = county_map_cleaned_data) +
  geom_sf(aes(fill = Birth.Rate)) +  # Map Preterm Birth Rate to the fill
  map_theme() +  # Apply the custom theme
  ggtitle("2023 Birth Rate (live births per 1000 people)") +
  scale_fill_gradientn(name = "Birth Rate\nrate", colours = myPalette(100))
  coord_sf(xlim = c(-79.5, -75), ylim = c(37, 39))

# Print the map
print(birth_rates_map)

#How many counties are represented in this analysis?
num_unique_geoid_counties <- length(unique(county_map_cleaned_data$GEOID))
print(num_unique_geoid_counties)

#Which counties have the highest and lowest birth rates?
# Find the county with the highest Birth Rate and its value (show only the first entry)
highest_birth_rate <- county_map_cleaned_data %>%
  filter(Birth.Rate == max(Birth.Rate, na.rm = TRUE)) %>%
  slice(1)  # Select the first row

cat("County with the highest Birth Rate: ", highest_birth_rate$County.of.Residence, "\n")
cat("Highest Birth Rate: ", highest_birth_rate$Birth.Rate, "\n")
# Find the county with the lowest Birth Rate and its value (show only the first entry)

lowest_birth_rate <- county_map_cleaned_data %>%
  filter(Birth.Rate == min(Birth.Rate, na.rm = TRUE)) %>%
  slice(1)  # Select the first row

cat("County with the lowest Birth Rate: ", lowest_birth_rate$County.of.Residence, "\n")
cat("Lowest Birth Rate: ", lowest_birth_rate$Birth.Rate, "\n")

# Calculate the average Birth Rate
average_birth_rate <- county_map_cleaned_data %>%
  summarise(Average_Birth_Rate = mean(Birth.Rate, na.rm = TRUE))

cat("Average Birth Rate: ", average_birth_rate$Average_Birth_Rate, "\n")


```

To better visualize and explore the birth rates, I then generated an interactive choropleth map of birth rates by county.

```{r}
#generate interactive choropleth map 
library(leaflet)
library(RColorBrewer)

# Define the color scale for the Birth Rate using colorBin
pal_fun <- colorBin(palette = brewer.pal(9, "YlOrRd")[c(1:5, 7)], 
                    bins = c(0, 5, 10, 15, 20, 25), 
                    reverse = FALSE)

# Create the popup message for each county
pu_message <- paste0(county_map_cleaned_data$County.of.Residence, 
                     "<br>Birth Rate: ",      
                     round(county_map_cleaned_data$Birth.Rate, 1), " live births per 1000 people")

# Create the leaflet map with the polygons
leaflet(county_map_cleaned_data) |>
  addPolygons(stroke = FALSE,               
              fillColor = ~pal_fun(Birth.Rate),
              fillOpacity = 0.7, smoothFactor = 0.5,
              popup = pu_message) |>   
  addProviderTiles(providers$CartoDB.Positron) |>   
  addLegend("bottomright",               
            pal = pal_fun,              
            values = ~Birth.Rate,  
            title = 'Birth Rate',    
            opacity = 1) |>             
  addScaleBar()

```

I repeated the analysis to generate county-level choropleth maps of preterm birth rates (\<37 gestational age births/total number of live births).

```{r}

# Convert Preterm.Birth.Rate to numeric
county_map_preterm_data$Preterm.Birth.Rate <- as.numeric(county_map_preterm_data$Preterm.Birth.Rate)

# Recheck the structure of the column
str(county_map_preterm_data$Preterm.Birth.Rate)

# Remove rows where Birth.Rate is NA
county_map_preterm_data <- county_map_preterm_data %>%
  filter(!is.na(Preterm.Birth.Rate))

# Generate the choropleth map for preterm birth rates
preterm_birth_rates_map <- ggplot(data = county_map_preterm_data) +
  geom_sf(aes(fill = Preterm.Birth.Rate)) +  # Map Preterm Birth Rate to the fill
  map_theme() +  # Apply the custom theme
  ggtitle("2023 Preterm Birth Rate % (<37 gestational age births/total number of live births)") +
  scale_fill_gradientn(name = "Preterm Birth Rate\nrate", colours = myPalette(100))
  coord_sf(xlim = c(-79.5, -75), ylim = c(37, 39))
  
preterm_birth_rates_map

#How many counties are represented in this analysis?
num_unique_geoid_counties_preterm <- length(unique(county_map_preterm_data$GEOID))
print(num_unique_geoid_counties_preterm)
  

#Which counties have the highest and lowest preterm birth rates?
# Find the county with the highest preterm Birth Rate and its value (show only the first entry)
highest_preterm_birth_rate <- county_map_preterm_data %>%
  filter(Preterm.Birth.Rate == max(Preterm.Birth.Rate, na.rm = TRUE)) %>%
  slice(1)  # Select the first row

cat("County with the highest preterm Birth Rate: ", highest_preterm_birth_rate$County.of.Residence, "\n")
cat("Highest preterm Birth Rate: ", highest_preterm_birth_rate$Preterm.Birth.Rate, "\n")
# Find the county with the lowest preterm Birth Rate and its value (show only the first entry)
lowest_preterm_birth_rate <- county_map_preterm_data %>%
  filter(Preterm.Birth.Rate == min(Preterm.Birth.Rate, na.rm = TRUE)) %>%
  slice(1)  # Select the first row

cat("County with the lowest preterm Birth Rate: ", lowest_preterm_birth_rate$County.of.Residence, "\n")
cat("Lowest preterm Birth Rate: ", lowest_preterm_birth_rate$Preterm.Birth.Rate, "\n")

#What is the average preterm birth rate? 
# Calculate the average preterm birth rate
average_preterm_birth_rate <- mean(county_map_preterm_data$Preterm.Birth.Rate, na.rm = TRUE)

cat("Average preterm birth rate: ", round(average_preterm_birth_rate, 2), "\n")


```

I now want a similarly interactive map of preterm birth data.

```{r}
#generate interactive choropleth map 
library(leaflet)
library(RColorBrewer)

# Define the color scale for the Birth Rate using colorBin
pal_fun <- colorBin(palette = brewer.pal(9, "YlOrRd")[c(1:5, 7)], 
                    bins = c(0, 5, 10, 15, 20, 25), 
                    reverse = FALSE)

county_map_preterm_data$Preterm.Birth.Rate <- as.numeric(county_map_preterm_data$Preterm.Birth.Rate)

# Create the popup message for each county
pu_message <- paste0(county_map_preterm_data$County.of.Residence, 
                     "<br>Preterm Birth Rate: ",      
                     round(county_map_preterm_data$Preterm.Birth.Rate, 1), "%")

# Create the leaflet map with the polygons
leaflet(county_map_preterm_data) |>
  addPolygons(stroke = FALSE,               
              fillColor = ~pal_fun(Preterm.Birth.Rate),
              fillOpacity = 0.7, smoothFactor = 0.5,
              popup = pu_message) |>   
  addProviderTiles(providers$CartoDB.Positron) |>   
  addLegend("bottomright",               
            pal = pal_fun,              
            values = ~Preterm.Birth.Rate,  
            title = 'Preterm Birth Rate',    
            opacity = 1) |>             
  addScaleBar()

```

Now I want to explore sex-stratified data for preterm birth.

```{r}

```

Number of NICU admissions by gestational age

```{r}
# Summarize the data by gestational age for total births
gestational_births_summary <- cleaned_data %>%
  group_by(OE.Gestational.Age.Recode.10) %>%
  summarise(
    Total_Births = n()  # Count the total number of births in each gestational age category
  ) %>%
  ungroup()

# Plot the total number of births by gestational age
ggplot(gestational_births_summary, aes(x = OE.Gestational.Age.Recode.10, y = Total_Births, fill = OE.Gestational.Age.Recode.10)) +
  geom_bar(stat = "identity", show.legend = FALSE) +
  labs(
    title = "Total Number of Births by Gestational Age",
    x = "Gestational Age at Birth",
    y = "Total Number of Births"
  ) +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))

```

Now I want to explore gestational age and NICU admission.

```{r}
# Summarizing the data by gestational age and NICU admission status
gestational_nicu_summary <- cleaned_data %>%
  group_by(OE.Gestational.Age.Recode.10) %>%
  summarise(
    Total_Births = n(),  # Count the total number of births in each gestational age category (both Yes and No)
    NICU_Admissions = sum(NICU.Admission == "Yes", na.rm = TRUE),  # Count NICU admissions
    Proportion_NICU_Admission = NICU_Admissions / Total_Births  # Calculate proportion of NICU admissions
  ) %>%
  ungroup()

# Now, plot the proportion of NICU admissions by gestational age
library(ggplot2)

ggplot(gestational_nicu_summary, aes(x = OE.Gestational.Age.Recode.10, y = Proportion_NICU_Admission, fill = OE.Gestational.Age.Recode.10)) +
  geom_bar(stat = "identity", show.legend = FALSE) +
  labs(
    title = "Proportion of NICU Admissions by Gestational Age",
    x = "Gestational Age at Birth",
    y = "Proportion of NICU Admissions"
  ) +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))


```

I want to view this data stratified by sex.

```{r}
gestational_nicu_sex_summary <- cleaned_data %>%
  group_by(OE.Gestational.Age.Recode.10, Sex.of.Infant) %>%
  summarise(
    Total_Births = n(),  # Count the total number of births in each gestational age category and sex
    NICU_Admissions = sum(NICU.Admission == "Yes", na.rm = TRUE),  # Count NICU admissions
    Proportion_NICU_Admission = NICU_Admissions / Total_Births  # Calculate proportion of NICU admissions
  ) %>%
  ungroup()

# Print the summarized data to check
print(gestational_nicu_sex_summary)

library(ggplot2)

ggplot(gestational_nicu_sex_summary, aes(x = OE.Gestational.Age.Recode.10, y = Proportion_NICU_Admission, fill = Sex.of.Infant)) +
  geom_bar(stat = "identity", position = "dodge") +  # Use 'dodge' for separate bars for each sex
  labs(
    title = "Proportion of NICU Admissions by Gestational Age and Sex",
    x = "Gestational Age at Birth",
    y = "Proportion of NICU Admissions"
  ) +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))


```

Exploratory analysis of gestational age and sex

```{r}
gestational_nicu_sex_summary <- cleaned_data %>%
  group_by(OE.Gestational.Age.Recode.10, Sex.of.Infant) %>%
  summarise(
    Total_Births = n()  # Count the total number of infants for each gestational age and sex
  ) %>%
  ungroup()

# Print the summarized data to check
print(gestational_nicu_sex_summary)

library(ggplot2)

ggplot(gestational_nicu_sex_summary, aes(x = OE.Gestational.Age.Recode.10, y = Total_Births, fill = Sex.of.Infant)) +
  geom_bar(stat = "identity", position = "dodge") +  # Use 'dodge' for separate bars for each sex
  labs(
    title = "Number of Infants Born by Gestational Age and Sex",
    x = "Gestational Age at Birth",
    y = "Total Number of Infants"
  ) +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))

```

Further exploratory analysis of gestational age and sex

```{r}
gestational_nicu_sex_summary_grouped <- cleaned_data %>%
  mutate(
    Gestational_Age_Group = ifelse(OE.Gestational.Age.Recode.10 %in% c("Under 20 weeks", "20 - 27 weeks", "28 - 31 weeks", "32 - 35 weeks", "36 weeks"), "Preterm", "Term")
  ) %>%
  group_by(Gestational_Age_Group, Sex.of.Infant) %>%
  summarise(
    Total_Births = n()
  ) %>%
  ungroup()

# Create the bar graph
ggplot(gestational_nicu_sex_summary_grouped, aes(x = Gestational_Age_Group, y = Total_Births, fill = Sex.of.Infant)) +
  geom_bar(stat = "identity", position = "dodge") +
  labs(
    title = "Number of Infants Born by Gestational Age Group and Sex",
    x = "Gestational Age Group",
    y = "Total Number of Infants"
  ) +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))

```

Are males more likely to be preterm?

```{r}
# Create binary variable for preterm (1) vs term (0)
cleaned_data$Preterm_Binary <- ifelse(cleaned_data$OE.Gestational.Age.Recode.10 %in% c("Under 20 weeks", "20 - 27 weeks", "28 - 31 weeks", "32 - 35 weeks", "36 weeks"), 1, 0)

# Logistic regression to test if males are more likely to be preterm
logistic_model <- glm(Preterm_Binary ~ Sex.of.Infant, data = cleaned_data, family = "binomial")
summary(logistic_model)

```

Are males more likely to be born extremely preterm (\<28 wks)?

```{r}
# Create a binary variable for extremely preterm (<28 weeks)
cleaned_data$Extremely_Preterm <- ifelse(cleaned_data$OE.Gestational.Age.Recode.10 == "Under 20 weeks" |
                                           cleaned_data$OE.Gestational.Age.Recode.10 == "20 - 27 weeks", 1, 0)

# Fit a logistic regression model
model <- glm(Extremely_Preterm ~ Sex.of.Infant, data = cleaned_data, family = binomial)

# Summary of the model
summary(model)

```

Are males more likely to be born very preterm (28-32 wks)

```{r}
# Create a binary variable for very preterm (28-32 weeks)
cleaned_data$Very_Preterm <- ifelse(cleaned_data$OE.Gestational.Age.Recode.10 %in% c("28 - 31 weeks", "32 - 35 weeks"), 1, 0)

# Fit a logistic regression model
model <- glm(Very_Preterm ~ Sex.of.Infant, data = cleaned_data, family = binomial)

# Summary of the model
summary(model)

```

Are males more likely to be admitted to the NICU?

```{r}
logistic_model <- glm(NICU.Admission == "Yes" ~ Sex.of.Infant, data = cleaned_data, family = "binomial")
summary(logistic_model)

```

Choropleth map for sex-stratified preterm birth data

```{}
```

Describe your results and include relevant tables, plots, and code/comments used to obtain them. You may refer to the @sec-methods as needed. End with a brief conclusion of your findings related to the question you set out to address. You can include references if you'd like, but this is not required.

## Conclusion

This the conclusion. The @sec-results can be invoked here.
